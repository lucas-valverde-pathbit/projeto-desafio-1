# Etapa de build: Construção da aplicação
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
ENV ASPNETCORE_URLS=http://+:5064

WORKDIR /src

# Copiar os projetos e restaurar dependências
COPY ["src/Api/Api.csproj", "src/Api/"]
COPY ["src/Application/Application.csproj", "src/Application/"]
COPY ["src/Domain/Domain.csproj", "src/Domain/"]
COPY ["src/Infrastructure/Infrastructure.csproj", "src/Infrastructure/"]
RUN dotnet restore "src/Api/Api.csproj"

# Instalar pacotes necessários
RUN dotnet add "src/Api/Api.csproj" package Npgsql.EntityFrameworkCore.PostgreSQL --version 9.0.3
RUN dotnet add "src/Api/Api.csproj" package Microsoft.AspNetCore.Authentication.JwtBearer --version 7.0.0
RUN dotnet add "src/Api/Api.csproj" package IdentityModel --version 7.0.0

# Copiar o restante dos arquivos e buildar a aplicação
COPY . . 
WORKDIR "/src/src/Api"
RUN dotnet build "Api.csproj" -c Release -o /app/build

# Instalar a ferramenta dotnet-ef e adicioná-la ao PATH global
RUN dotnet tool install --global dotnet-ef
ENV PATH="$PATH:/root/.dotnet/tools" 

# Etapa de execução: Imagem final do ASP.NET
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base
ENV ASPNETCORE_URLS=http://+:5064

WORKDIR /app
EXPOSE 5064

# Copiar a build gerada da etapa anterior
COPY --from=build /app/build . 

# Instalar cliente PostgreSQL no contêiner para se conectar ao banco de dados
RUN apt-get update && \
    apt-get install -y postgresql-client && \
    rm -rf /var/lib/apt/lists/*

# Copiar scripts de inicialização
COPY wait-for-postgres.sh /wait-for-postgres.sh
COPY startup.sh /startup.sh
RUN chmod +x /wait-for-postgres.sh /startup.sh

# Definir o ponto de entrada para o contêiner (executar o script de inicialização)
ENTRYPOINT ["/startup.sh"]
