CSS
/* Estilo Global */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Arial', sans-serif;
}

body {
    background-color: #f4f4f4;
    color: #333;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    padding: 20px;
    position: relative;
}

/* Container do Layout */
.container {
    max-width: 1200px;
    margin: auto;
    background: #fff;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
}

/* Títulos */
h1 {
    text-align: center;
    color: #4a148c;
}

h3 {
    text-align: center;
    color: #4a148c;
    margin-bottom: 20px;
}

/* Formulário Geral */
form {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

/* Labels e Inputs */
label {
    font-size: 16px;
    font-weight: bold;
    color: #4a148c;
}

input[type="text"],
input[type="email"],
input[type="number"],
select {
    width: 100%;
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: 6px;
    font-size: 16px;
    background-color: #f9f9f9;
    color: #333;
    transition: border-color 0.3s ease;
}

input:focus {
    border-color: #5f27cd;
    outline: none;
}

/* Botões */
button {
    padding: 12px 20px;
    background-color: #4a148c;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
    width: 100%;
    margin-top: 10px;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #6a1b9a;
}

/* Botões adicionais */
button[type="button"] {
    background-color: #6a1b9a;
    width: auto;
    margin: 5px;
}

button[type="button"]:hover {
    background-color: #9c4dcc;
}

/* Modal - Flutuante */
.customer-modal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    width: 300px;
    display: none; /* Inicia oculto */
    opacity: 0;
    transition: opacity 0.3s ease, transform 0.3s ease;
}

.customer-modal.active {
    display: block;
    opacity: 1;
    transform: translate(-50%, -50%) scale(1.05);
}

.customer-modal button[type="submit"] {
    background-color: #4a148c;
    color: white;
}

.customer-modal button[type="submit"]:hover {
    background-color: #6a1b9a;
}

.customer-modal button[type="button"] {
    background-color: #6a1b9a;
    color: white;
}

.customer-modal button[type="button"]:hover {
    background-color: #9c4dcc;
}

/* Overlay - Tela Congelada ao Exibir Modal */
.overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.3);
    z-index: 500;
    display: none;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.overlay.active {
    display: block;
    opacity: 1;
}

/* Filtro e Botão de Adicionar */
.filter-container {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 100;
    display: flex;
    gap: 10px;
    align-items: center;
}

#filterInput {
    padding: 8px;
    border-radius: 4px;
    border: 1px solid #ddd;
    width: 250px;
}

#addButton {
    padding: 10px;
    border-radius: 4px;
    border: none;
    background-color: #4a148c;
    color: white;
}

#addButton:hover {
    background-color: #6a1b9a;
}

/* Cards de Clientes em Grid */
.customer-card-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
    margin-top: 120px;
}

.customer-card {
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 15px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    position: relative;
    min-height: 180px;
}

.customer-card h3 {
    margin: 0 0 10px;
    color: #4a148c;
}

.customer-card .actions {
    display: flex;
    justify-content: space-between;
    position: absolute;
    top: 10px;
    right: 10px;
    width: auto;
}

.customer-card .actions button {
    background-color: rgba(74, 20, 140, 0.5);
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
}

.customer-card .actions button:hover {
    background-color: rgba(74, 20, 140, 0.8);
}

/* Responsividade para 2 colunas em telas menores */
@media (max-width: 1024px) {
    .customer-card-container {
        grid-template-columns: repeat(2, 1fr);
    }
}

/* Responsividade para 1 coluna em telas muito pequenas */
@media (max-width: 768px) {
    .customer-card-container {
        grid-template-columns: 1fr;
    }

    .login-container {
        padding: 20px;
    }

    h1 {
        font-size: 28px;
    }

    label {
        font-size: 12px;
    }

    input,
    button {
        font-size: 14px;
    }
}

/* Estilo do botão de excluir */
#deleteButton {
    background-color: #6a1b9a;
    color: white;
}

#deleteButton:hover {
    background-color: #9c4dcc;
}


HTML
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../css/order.css">
    <title>Criar Pedido</title>
</head>
<body>
     <!-- Botão de Voltar -->
    <div class="back-button">
         <a href="home.html">
         <button class="back-btn">Voltar para Seleção</button>
      </a>
     </div>
     
    <div class="container">
        <!-- Filtro e Botão de Adicionar Ordens -->
        <div class="filter-container">
            <input type="text" id="filterInput" placeholder="Filtrar Ordens..." onkeyup="filterOrders()">
            <button id="addOrderBtn" onclick="showAddOrderForm()">Adicionar Ordem</button>
        </div>

        <!-- Lista de Ordens -->
        <div class="products-list" id="productsList">
            <!-- As Ordens cadastradas serão exibidas aqui -->
        </div>

    <div id="addOrderModal" class="order-modal">
        <h1>Criar Pedido</h1>
        <form id="orderForm" onsubmit="saveOrder(event)">
            <label for="customerId">Cliente:</label>
            <input type="text" id="customerId" readonly required>
            <button type="button" onclick="showCustomerSelection()">+</button>


            <label for="cep">CEP:</label>
            <input type="text" id="cep" required onblur="fetchAddress()">

            <label for="deliveryAddress">Endereço:</label>
            <input type="text" id="deliveryAddress" required>

            <label for="status">Status:</label>
            <select id="status" required>
                <option value="">Selecione o status</option>
                <option value="pendente">Pendente</option>
                <option value="em_transito">Em transito</option>
                <option value="entregue">Entregue</option>
            </select>

            <div id="productFields">
                <label for="productId">Produto:</label>
                <input type="text" id="productId" readonly required>
                <label for="quantity">Quantidade:</label>
                <input type="number" id="quantity" required min="1">
            <button type="button" onclick="showProductSelection()">+</button>

            </div>

            <button type="button" onclick="addProductField()">Adicionar Produto</button>
            <button type="submit">Adicionar Pedido</button>
        </form>
        <div id="orderCardContainer"></div>
    </div>

    <div id="addOrderModal" class="order-modal" style="display:none;">
        <h3>Adicionar Pedido</h3>
        <form id="addOrderForm" onsubmit="saveOrder(event)">
            <!-- Campos do formulário de adicionar pedido -->
            <button type="button" onclick="closeForm()">Fechar</button>
        </form>
    </div>

    <!-- Modal de Seleção de Cliente -->
    <div id="customerSelectionModal" class="order-modal" style="display:none;">
        <h3>Selecionar Cliente</h3>
        <div id="customerListContainer"></div>
        <button type="button" onclick="closeCustomerSelection()">Fechar</button>
    </div>

    <!-- Modal de Seleção de Produto -->
    <div id="productSelectionModal" class="order-modal" style="display:none;">
        <h3>Selecionar Produto</h3>
        <div id="productListContainer"></div>
        <button type="button" onclick="closeProductSelection()">Fechar</button>
    </div>

    <script src="../js/order.js"></script>
        <!-- <script type="module" src="../js/auth.js"></script> -->

</body>
</html>




JavaScript
// Variáveis globais para armazenar dados selecionados
const apiBaseUrl = window.location.hostname === "localhost"
    ? "http://localhost:5064"  // URL de desenvolvimento (localhost)
    : "http://api:5064"; // URL para produção (se necessário)

let selectedCustomer = null;
let selectedProducts = []; // Alterado para armazenar múltiplos produtos
let selectedProduct = null; // Armazena o produto selecionado no momento

// Função para exibir o formulário de adição de pedido
function showAddForm() {
    document.getElementById('addOrderModal').style.display = 'block';
    loadCustomers();
    loadProducts();
}

// Função para mostrar o modal de seleção de cliente
function showCustomerSelection() {
    const modal = document.getElementById('customerSelectionModal');
    if (modal) {
        modal.style.display = 'block';
        loadCustomers(); // Carrega os clientes
    } else {
        console.error('Modal de seleção de clientes não encontrado.');
    }
}

// Função para adicionar um novo campo de produto
function addProductField() {
    const productFieldsContainer = document.getElementById('productFields');
    
    const newProductField = document.createElement('div');
    newProductField.innerHTML = `
        <label for="productId">Produto:</label>
        <input type="text" class="productId" readonly required>
        <button type="button" onclick="showProductSelection(this)">+</button>
        <label for="quantity">Quantidade:</label>
        <input type="number" class="quantity" required min="1">
    `;
    
    productFieldsContainer.appendChild(newProductField);
}

// Função para carregar os clientes na lista
function loadCustomers() {
    fetch(`${apiBaseUrl}/api/customers`) // URL correta da API para buscar clientes
        .then(response => response.json())
        .then(customers => {
            const container = document.getElementById('customerListContainer');
            container.innerHTML = ''; // Limpa a lista antes de adicionar novos itens

            customers.forEach(customer => {
                const button = document.createElement('button');
                button.textContent = customer.customerName;
                button.onclick = function() {
                    selectCustomer(customer);
                };
                container.appendChild(button);
            });
        })
        .catch(error => console.error('Erro ao carregar clientes:', error));
}

// Função para selecionar um cliente
function selectCustomer(customer) {
    selectedCustomer = customer;
    document.getElementById('customerId').value = customer.customerName; // Exibe o nome do cliente no campo de entrada
    closeCustomerSelection();
}

// Função para fechar o modal de seleção de cliente
function closeCustomerSelection() {
    document.getElementById('customerSelectionModal').style.display = 'none';
}

// Função para abrir o modal de seleção de produto
function showProductSelection() {
    const modal = document.getElementById('productSelectionModal');
    if (modal) {
        modal.style.display = 'block';
        loadProducts(); // Carrega os produtos
    } else {
        console.error('Modal de seleção de produtos não encontrado.');
    }
}

// Função para carregar os produtos na lista
function loadProducts() {
    fetch(`${apiBaseUrl}/api/products`) // URL correta da API para buscar produtos
        .then(response => response.json())
        .then(products => {
            const container = document.getElementById('productListContainer');
            container.innerHTML = ''; // Limpa a lista antes de adicionar novos itens

            products.forEach(product => {
                const button = document.createElement('button');
                button.textContent = product.productName;
                button.onclick = function() {
                    selectProduct(product);
                };
                container.appendChild(button);
            });
        })
        .catch(error => console.error('Erro ao carregar produtos:', error));
}

// Função para selecionar um produto
function selectProduct(product) {
    // Encontra o contêiner de campos do produto (agora considerando a criação dinâmica)
    const productFieldContainer = event.target.closest('div');
    
    // Encontra os campos dentro desse contêiner (agora usando a classe 'productId' e 'quantity')
    const productIdField = productFieldContainer.querySelector('.productId');
    const quantityField = productFieldContainer.querySelector('.quantity');

    if (productIdField && quantityField) { // Verifica se os campos existem
        selectedProducts.push(product); // Adiciona o produto à lista de produtos selecionados
        productIdField.value = product.productName; // Exibe o nome do produto no campo de entrada
        quantityField.value = 1; // Define uma quantidade padrão
        closeProductSelection(); // Fecha o modal de seleção de produto
    } else {
        console.error('Campos de produto ou quantidade não encontrados.');
    }
}

// Função para fechar o modal de seleção de produto
function closeProductSelection() {
    document.getElementById('productSelectionModal').style.display = 'none';
}

// Função para buscar o endereço com base no CEP
function fetchAddress() {
    const cepInput = document.getElementById('cep');
    const cep = cepInput.value.replace(/\D/g, ''); // Remove caracteres não numéricos

    if (cep) {
        fetch(`${apiBaseUrl}/api/cep/${cep}`)
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => {
                        throw new Error(errorData.error || 'Erro ao buscar endereço');
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data && data.address) {
                    document.getElementById('deliveryAddress').value = data.address;
                } else {
                    alert('CEP não encontrado.');
                }
            })
            .catch(error => {
                console.error('Erro ao buscar endereço:', error);
                alert(error.message);
            });
    }
}

// Função para salvar o pedido
function saveOrder(event) {
    event.preventDefault();

    if (!selectedCustomer) {
        alert('Por favor, selecione todos os campos obrigatórios!');
        return;
    }

    const orderData = {
        customerId: selectedCustomer.id, // ID do cliente
        deliveryAddress: document.getElementById('deliveryAddress').value,
        status: document.getElementById('status').value,
        orderItems: [] // Alterado para armazenar os itens do pedido
    };

    const productFields = document.querySelectorAll('#productFields > div');
    productFields.forEach(field => {
        const productId = field.querySelector('input[id="productId"]').value;
        const quantity = field.querySelector('input[type="number"]').value;

        if (productId && quantity) {
            orderData.orderItems.push({
                productId: productId, // ID do produto
                orderItemQuantity: quantity, // Quantidade do produto
                orderItemPrice: selectedProduct.productPrice // Valor do produto
            });
        }
    });

    fetch(`${apiBaseUrl}/api/orders`, { // URL correta da API para criar pedidos
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(orderData)
    })
    .then(response => response.json())
    .then(newOrder => {
        alert('Pedido criado com sucesso!');
        closeForm(); // Fecha o formulário
        loadOrders(); // Recarrega a lista de pedidos
    })
    .catch(error => console.error('Erro ao criar pedido:', error));
}

// Função para carregar os pedidos
function loadOrders() {
    fetch(`${apiBaseUrl}/api/orders`) // URL correta da API de pedidos
        .then(response => response.json())
        .then(orders => {
            const container = document.getElementById('orderCardContainer');
            container.innerHTML = ''; // Limpa a lista antes de adicionar novos pedidos

            orders.forEach(order => {
                const orderCard = createOrderCard(order);
                container.appendChild(orderCard);
            });
        })
        .catch(error => console.error('Erro ao carregar pedidos:', error));
}

// Função para criar um card de pedido
function createOrderCard(order) {
    const card = document.createElement('div');
    card.classList.add('order-card');
    card.innerHTML = `
        <h3>Pedido #${order.id}</h3>
        <p><strong>Cliente:</strong> ${order.customerName}</p>
        <p><strong>Endereço:</strong> ${order.deliveryAddress}</p>
        <p><strong>Status:</strong> ${order.status}</p>
        <div class="actions">
            <button onclick="editOrder('${order.id}')">Editar</button>
            <button onclick="deleteOrder('${order.id}')">Excluir</button>
        </div>
    `;
    return card;
}

// Função para editar um pedido
function editOrder(orderId) {
    alert('Editar pedido: ' + orderId);
}

// Função para excluir um pedido
function deleteOrder(orderId) {
    if (confirm('Tem certeza que deseja excluir este pedido?')) {
        fetch(`${apiBaseUrl}/api/orders/${orderId}`, { // URL correta de sua API
            method: 'DELETE'
        })
        .then(() => {
            alert('Pedido excluído!');
            loadOrders(); // Atualiza a lista de pedidos
        })
        .catch(error => console.error('Erro ao excluir pedido:', error));
    }
}

// Função para fechar o formulário de criação de pedido
function closeForm() {
    document.getElementById('addOrderModal').style.display = 'none';
}

// Função para filtrar pedidos por status
function filterOrders() {
    const statusFilter = document.getElementById('statusFilter').value;

    fetch(`${apiBaseUrl}/api/orders?status=${statusFilter}`)
        .then(response => response.json())
        .then(orders => {
            const container = document.getElementById('orderCardContainer');
            container.innerHTML = '';

            orders.forEach(order => {
                const orderCard = createOrderCard(order);
                container.appendChild(orderCard);
            });
        })
        .catch(error => console.error('Erro ao carregar pedidos filtrados:', error));
}

